// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package database

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, created_at FROM users 
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
INSERT INTO users 
(username) VALUES ($1)
ON CONFLICT (username) 
DO NOTHING
`

func (q *Queries) UpdateUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, updateUser, username)
	return err
}
