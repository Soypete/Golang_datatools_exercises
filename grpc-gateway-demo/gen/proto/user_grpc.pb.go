// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserActionClient is the client API for UserAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActionClient interface {
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserInfo(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendUserAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userActionClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActionClient(cc grpc.ClientConnInterface) UserActionClient {
	return &userActionClient{cc}
}

func (c *userActionClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserAction/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) GetUserInfo(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserAction/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) DeleteUser(ctx context.Context, in *UserIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserAction/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) SendUserAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserAction/SendUserAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActionServer is the server API for UserAction service.
// All implementations should embed UnimplementedUserActionServer
// for forward compatibility
type UserActionServer interface {
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	GetUserInfo(context.Context, *UserIdentifier) (*User, error)
	DeleteUser(context.Context, *UserIdentifier) (*emptypb.Empty, error)
	SendUserAction(context.Context, *Action) (*emptypb.Empty, error)
}

// UnimplementedUserActionServer should be embedded to have forward compatible implementations.
type UnimplementedUserActionServer struct {
}

func (UnimplementedUserActionServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserActionServer) GetUserInfo(context.Context, *UserIdentifier) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserActionServer) DeleteUser(context.Context, *UserIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserActionServer) SendUserAction(context.Context, *Action) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserAction not implemented")
}

// UnsafeUserActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActionServer will
// result in compilation errors.
type UnsafeUserActionServer interface {
	mustEmbedUnimplementedUserActionServer()
}

func RegisterUserActionServer(s grpc.ServiceRegistrar, srv UserActionServer) {
	s.RegisterService(&UserAction_ServiceDesc, srv)
}

func _UserAction_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserAction/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserAction/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).GetUserInfo(ctx, req.(*UserIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserAction/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).DeleteUser(ctx, req.(*UserIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_SendUserAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).SendUserAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserAction/SendUserAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).SendUserAction(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAction_ServiceDesc is the grpc.ServiceDesc for UserAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserAction",
	HandlerType: (*UserActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _UserAction_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserAction_GetUserInfo_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserAction_DeleteUser_Handler,
		},
		{
			MethodName: "SendUserAction",
			Handler:    _UserAction_SendUserAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
